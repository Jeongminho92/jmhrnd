/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2021 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "stdio.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
int state = 0;
int red = 0;
int blue = 0;
int green = 0;
int Source_cnt = 0;
int Color_cnt = 0;
int Motor_cnt = 0;
int Color_flag = 0;
int i = 0;
#define _10us 1
#define _100us 10
#define _1ms 100
#define _10ms 1000
#define _100ms 10000
#define _1000ms 100000
#define _1s 100000
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void Color_Sensor(void);
void Source(void);
void Motor(void);
void Servo_Motor(void);
void Wave_Sensor(void);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int fputc(int ch, FILE *f) // prittf for iar 
{
     HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
      return ch;
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_TIM2_Init();
  MX_USART1_UART_Init();
  MX_TIM3_Init();
  MX_TIM1_Init();
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_Base_Start_IT(&htim1); //DC모터 속도제어용
  HAL_TIM_Base_Start_IT(&htim2); //Sensor 감지 속도 및 CNT
  HAL_TIM_Base_Start_IT(&htim3); //스텝모터 PWM
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
  //int i;
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
      Color_Sensor();
      Motor();
      Servo_Motor();
      Wave_Sensor();
      /*
      for (i = 1; i < 6; i++)   // clockwise
      {
          __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, i*200 - 1);  // duty: i*20%
          __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, i*100 - 1);  // duty: i*20%
          HAL_Delay(2000);
      }
      __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 1);  // duty: 0%
      __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, 1);  // duty: 0%
      //HAL_Delay(2000);
      for (i = 1; i < 6; i++)   // counterclockwise
      {
        __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, i*200 - 1);  // duty: i*20%
        __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, i*200 - 1);
        HAL_Delay(2000);
      }
        __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 1);  // duty: 0%
        __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 1);  // duty: 0%  
        HAL_Delay(2000);
        */
      
    /*if(flag == 0)
     {
      PSC++;
      if(PSC >= 600)
      {
        flag = 1;
      }
     }
     else
     {
        PSC--;
        if(PSC <= 100) flag = 0;
     }
      TIM2->PSC = PSC;
      HAL_Delay(10);
    */
   }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
     if(htim == &htim2) //10us
     {
       Source_cnt++;
       Color_cnt++;
     }
     if(htim == &htim3) //20ms
     {
       Motor_cnt++;
     }
}
void Wave_Sensor(void)
{
  if(Source_cnt<=1)
  {
     HAL_GPIO_WritePin(GPIOA,GPIO_PIN_15,GPIO_PIN_SET);//Trig High
     
  }
}
void Servo_Motor(void)
{
       __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 132); //MAX 132 150도
       HAL_Delay(5000); // 1000ms
  //2ms Pwm - Servo motor arm rotates to 90 degree
     // __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 100);
     // HAL_Delay(5000); // 1000ms
       //1.5ms Pwm - Servo motor arm rotates to 90 degree
       //__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 75);
       //HAL_Delay(1000); // 1000ms
       //1ms Pwm - Servo motor arm rotates to 0 degree
       __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 50);
       HAL_Delay(5000); // 1000ms
}
void Motor(void)
{
  
  printf("Motor_cnt=%d\n", Motor_cnt);
  if(Motor_cnt <= 100)
  {
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 1000); 
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 1);
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 1000);
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 1);
  }
  else if(Motor_cnt <= 200)
  {
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_1, 1); 
    __HAL_TIM_SetCompare(&htim1, TIM_CHANNEL_4, 1000);
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, 1);
    __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, 1000);
  }
  else Motor_cnt = 0;
  
}
void Color_Sensor(void)
{
    /*--------------------------Filter selection---------------------------*/
    //s0 s1 low high 2%
    //s0 s1 high low 20%
    //s0 s1 high high 100%
    //s2 s3 low low red
    //s2 s3 low high blue
    //s2 s3 higf high green
    /*---------------------------------------------------------------------*/
     
    /*----------------------Frequency scaling 100%-------------------------*/
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);//s0 high
      HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_SET);//s1 high
    /*---------------------------------------------------------------------*/
      if(Color_cnt <= 10000)
      {
        //printf("__!!Start!!-- %d %d %d\r\n", red, green, blue);
      }     
      else if(Color_cnt <= 20000) //red
      {
          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);//s2 low
          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_RESET);//s3 low
          if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)
          {
            if(state == 0)
            {
              red += 1;
              state = 1;
            }
          }
          else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)
          {
            if(state == 1)
            {
              state = 0;
            }
          }

       }
       else if(Color_cnt <= 30000) //blue
       {          
          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_RESET);//s2 low
          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);//s3 high
          if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)
          {
            if(state == 0)
            {
              blue += 1;
              state = 1;
            }
          }
          else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)
          {
            if(state == 1)
            {
              state = 0;
            }
          }
          
       }
       else if(Color_cnt <= 40000) //green
       {    
          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_4,GPIO_PIN_SET);//s2 high
          HAL_GPIO_WritePin(GPIOB,GPIO_PIN_5,GPIO_PIN_SET);//s3 high         
          if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 1)
          {
            if(state == 0)
            {
              green += 1;
              state = 1;
            }
          }
          else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8) == 0)
          {
            if(state == 1)
            {
              state = 0;
            }
          }         
       }
       else
       {
         if(red<1000) //overflow
         {
            if((red >= blue) && (red >= green))
            {
                printf("__!!red!!-- %d %d %d\r\n", red, green, blue);                
            }
            else if((blue > red) && (blue >= green))
            {
                printf("--!!blue!!-- %d %d %d\r\n",red, green, blue);
            }
            else
            {
                printf("--!!green!!-- %d %d %d\r\n",red, green, blue);
            }
         }          
         red = 0;
         blue = 0;
         green = 0;
         Color_cnt = 0;        
       }
}
    //---------------------------SOURCE START-------------------------------//
void SOURCE(void)
{
  /*
#define _10us 1
#define _100us 10
#define _1ms 100
#define _10ms 1000
#define _100ms 10000
#define _1000ms 100000
#define _1s 100000
*/
    if(Source_cnt == _10us){//10us 설정
      Source_cnt = 0;
    }
}
    //---------------------------SOURCE END---------------------------------//  

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
